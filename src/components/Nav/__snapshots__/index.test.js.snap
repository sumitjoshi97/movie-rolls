// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Nav component unit tests should render properly 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <Nav
    handleNav={[MockFunction]}
    options={
      Array [
        Object {
          "name": "type1",
          "type": "type1",
        },
        Object {
          "name": "type2",
          "type": "type2",
        },
      ]
    }
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "checkPropTypes": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": Array [
        <NavItem
          handleNav={[MockFunction]}
          index={0}
          isActive={true}
          name="type1"
          setActive={[Function]}
          type="type1"
        />,
        <NavItem
          handleNav={[MockFunction]}
          index={1}
          isActive={false}
          name="type2"
          setActive={[Function]}
          type="type2"
        />,
      ],
      "className": "nav",
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": "type1",
        "nodeType": "function",
        "props": Object {
          "handleNav": [MockFunction],
          "index": 0,
          "isActive": true,
          "name": "type1",
          "setActive": [Function],
          "type": "type1",
        },
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": "type2",
        "nodeType": "function",
        "props": Object {
          "handleNav": [MockFunction],
          "index": 1,
          "isActive": false,
          "name": "type2",
          "setActive": [Function],
          "type": "type2",
        },
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
    ],
    "type": "nav",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          <NavItem
            handleNav={[MockFunction]}
            index={0}
            isActive={true}
            name="type1"
            setActive={[Function]}
            type="type1"
          />,
          <NavItem
            handleNav={[MockFunction]}
            index={1}
            isActive={false}
            name="type2"
            setActive={[Function]}
            type="type2"
          />,
        ],
        "className": "nav",
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": "type1",
          "nodeType": "function",
          "props": Object {
            "handleNav": [MockFunction],
            "index": 0,
            "isActive": true,
            "name": "type1",
            "setActive": [Function],
            "type": "type1",
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": "type2",
          "nodeType": "function",
          "props": Object {
            "handleNav": [MockFunction],
            "index": 1,
            "isActive": false,
            "name": "type2",
            "setActive": [Function],
            "type": "type2",
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
      ],
      "type": "nav",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "legacyContextMode": "parent",
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getChildContext": Object {
            "calledByRenderer": false,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;
