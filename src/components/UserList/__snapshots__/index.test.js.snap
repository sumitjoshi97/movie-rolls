// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`UserList component unit tests should render properly 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <UserList
    list={
      Object {
        "0": Object {
          "id": "01",
          "type": "movie",
        },
        "1": Object {
          "id": "02",
          "type": "tv",
        },
      }
    }
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "checkPropTypes": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": <React.Fragment>
        <List
          items={
            Array [
              Object {
                "id": "01",
                "type": "movie",
              },
            ]
          }
          name="movies"
          type="movie"
        />
        <List
          items={
            Array [
              Object {
                "id": "02",
                "type": "tv",
              },
            ]
          }
          name="TV shows"
          type="tv"
        />
      </React.Fragment>,
      "className": "user-list",
    },
    "ref": null,
    "rendered": Object {
      "instance": null,
      "key": undefined,
      "nodeType": "function",
      "props": Object {
        "children": Array [
          <List
            items={
              Array [
                Object {
                  "id": "01",
                  "type": "movie",
                },
              ]
            }
            name="movies"
            type="movie"
          />,
          <List
            items={
              Array [
                Object {
                  "id": "02",
                  "type": "tv",
                },
              ]
            }
            name="TV shows"
            type="tv"
          />,
        ],
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "items": Array [
              Object {
                "id": "01",
                "type": "movie",
              },
            ],
            "name": "movies",
            "type": "movie",
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "items": Array [
              Object {
                "id": "02",
                "type": "tv",
              },
            ],
            "name": "TV shows",
            "type": "tv",
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
      ],
      "type": Symbol(react.fragment),
    },
    "type": "div",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": <React.Fragment>
          <List
            items={
              Array [
                Object {
                  "id": "01",
                  "type": "movie",
                },
              ]
            }
            name="movies"
            type="movie"
          />
          <List
            items={
              Array [
                Object {
                  "id": "02",
                  "type": "tv",
                },
              ]
            }
            name="TV shows"
            type="tv"
          />
        </React.Fragment>,
        "className": "user-list",
      },
      "ref": null,
      "rendered": Object {
        "instance": null,
        "key": undefined,
        "nodeType": "function",
        "props": Object {
          "children": Array [
            <List
              items={
                Array [
                  Object {
                    "id": "01",
                    "type": "movie",
                  },
                ]
              }
              name="movies"
              type="movie"
            />,
            <List
              items={
                Array [
                  Object {
                    "id": "02",
                    "type": "tv",
                  },
                ]
              }
              name="TV shows"
              type="tv"
            />,
          ],
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "items": Array [
                Object {
                  "id": "01",
                  "type": "movie",
                },
              ],
              "name": "movies",
              "type": "movie",
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "items": Array [
                Object {
                  "id": "02",
                  "type": "tv",
                },
              ],
              "name": "TV shows",
              "type": "tv",
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
        ],
        "type": Symbol(react.fragment),
      },
      "type": "div",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "legacyContextMode": "parent",
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getChildContext": Object {
            "calledByRenderer": false,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;
