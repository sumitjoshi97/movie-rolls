{"version":3,"sources":["views/Home/index.jsx"],"names":["sliderOptions","arrows","dots","infinite","speed","slidesToShow","slidesToScroll","autoplay","autoplaySpeed","cssEase","responsive","breakpoint","settings","Home","state","currentType","renderHero","props","currentMovies","currentShows","renderData","results","length","push","data","type","map","slide","key","id","pageId","title","poster","poster_path","backdrop","backdrop_path","rating","vote_average","summary","overview","adult","year","release_date","split","name","first_air_date","handleNav","itemType","setState","renderLists","popularMovies","topMovies","upcomingMovies","items","popularShows","topShows","airingShows","this","fetchCurrentMovies","fetchCurrentShows","fetchPopularMovies","fetchUpcomingMovies","fetchTopMovies","fetchPopularShows","fetchAiringShows","fetchTopShows","className","options","Component","connect","movies","current","popular","upcoming","top","shows","airingToday","dispatch","actions"],"mappings":"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","file":"static/js/11.4ddd1532.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport Slider from 'react-slick'\r\nimport PropTypes from 'prop-types'\r\n\r\nimport Hero from '../../components/Hero'\r\nimport Nav from '../../components/Nav'\r\nimport List from '../../components/List'\r\n\r\nimport * as actions from '../../actions'\r\n\r\nimport './styles.scss'\r\n\r\nconst sliderOptions = {\r\n  arrows: false,\r\n  dots: true,\r\n  infinite: true,\r\n  speed: 800,\r\n  slidesToShow: 1,\r\n  slidesToScroll: 1,\r\n  autoplay: true,\r\n  autoplaySpeed: 4000,\r\n  cssEase: 'linear',\r\n  responsive: [\r\n    {\r\n      breakpoint: 750,\r\n      settings: {\r\n        dots: false\r\n      }\r\n    }\r\n  ]\r\n}\r\n\r\nexport class Home extends Component {\r\n  static propTypes = {\r\n    currentMovies: PropTypes.object,\r\n    popularMovies: PropTypes.object,\r\n    upcomingMovies: PropTypes.object,\r\n    topMovies: PropTypes.object,\r\n    currentShows: PropTypes.object,\r\n    popularShows: PropTypes.object,\r\n    airingShows: PropTypes.object,\r\n    topShows: PropTypes.object,\r\n    fetchCurrentMovies: PropTypes.func,\r\n    fetchPopularMovies: PropTypes.func,\r\n    fetchUpcomingMovies: PropTypes.func,\r\n    fetchTopMovies: PropTypes.func,\r\n    fetchCurrentShows: PropTypes.func,\r\n    fetchPopularShows: PropTypes.func,\r\n    fetchAiringShows: PropTypes.func,\r\n    fetchTopShows: PropTypes.func\r\n  }\r\n\r\n  state = {\r\n    currentType: 'movie'\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.props.fetchCurrentMovies()\r\n    this.props.fetchCurrentShows()\r\n\r\n    this.props.fetchPopularMovies()\r\n    this.props.fetchUpcomingMovies()\r\n    this.props.fetchTopMovies()\r\n\r\n    this.props.fetchPopularShows()\r\n    this.props.fetchAiringShows()\r\n    this.props.fetchTopShows()\r\n  }\r\n\r\n  renderHero = () => {\r\n    const { currentMovies, currentShows } = this.props\r\n\r\n    let renderData = []\r\n\r\n    if (\r\n      currentMovies &&\r\n      currentMovies.results.length > 0 &&\r\n      (currentShows && currentShows.results.length > 0)\r\n    ) {\r\n      renderData.push(\r\n        { data: currentMovies.results[0], type: 'movie' },\r\n        { data: currentMovies.results[1], type: 'movie' },\r\n        { data: currentShows.results[0], type: 'tv' },\r\n        { data: currentShows.results[1], type: 'tv' }\r\n      )\r\n\r\n      return renderData.map(slide => {\r\n        if (slide.type === 'movie') {\r\n          return (\r\n            <Hero\r\n              key={slide.data.id}\r\n              pageId={slide.data.id}\r\n              title={slide.data.title}\r\n              poster={slide.data.poster_path}\r\n              backdrop={slide.data.backdrop_path}\r\n              rating={slide.data.vote_average}\r\n              type={slide.type}\r\n              summary={slide.data.overview}\r\n              adult={slide.data.adult}\r\n              year={slide.data.release_date.split('-')[0]}\r\n            />\r\n          )\r\n        } else {\r\n          return (\r\n            <Hero\r\n              key={slide.data.id}\r\n              pageId={slide.data.id}\r\n              title={slide.data.name}\r\n              poster={slide.data.poster_path}\r\n              backdrop={slide.data.backdrop_path}\r\n              rating={slide.data.vote_average}\r\n              type={slide.type}\r\n              summary={slide.data.overview}\r\n              year={slide.data.first_air_date.split('-')[0]}\r\n            />\r\n          )\r\n        }\r\n      })\r\n    }\r\n\r\n    return renderData\r\n  }\r\n\r\n  handleNav = itemType => {\r\n    this.setState({\r\n      currentType: itemType\r\n    })\r\n  }\r\n\r\n  renderLists = () => {\r\n    if (this.state.currentType === 'movie') {\r\n      const {\r\n        currentMovies,\r\n        popularMovies,\r\n        topMovies,\r\n        upcomingMovies\r\n      } = this.props\r\n\r\n      if (currentMovies && popularMovies && topMovies && upcomingMovies) {\r\n        return (\r\n          <>\r\n            <List\r\n              type='movie'\r\n              name='in theaters'\r\n              items={currentMovies.results}\r\n            />\r\n            <List type='movie' name='popular' items={popularMovies.results} />\r\n            <List type='movie' name='upcoming' items={upcomingMovies.results} />\r\n            <List type='movie' name='top rated' items={topMovies.results} />\r\n          </>\r\n        )\r\n      }\r\n    } else {\r\n      const { currentShows, popularShows, topShows, airingShows } = this.props\r\n\r\n      if (currentShows && popularShows && topShows && airingShows) {\r\n        return (\r\n          <>\r\n            <List type='tv' name='airing today' items={airingShows.results} />\r\n            <List type='tv' name='popular' items={popularShows.results} />\r\n            <List type='tv' name='on TV' items={currentShows.results} />\r\n            <List type='tv' name='top rated' items={topShows.results} />\r\n          </>\r\n        )\r\n      }\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className='home'>\r\n        <div className='home__hero'>\r\n          <Slider {...sliderOptions}>{this.renderHero()}</Slider>\r\n          <Nav\r\n            handleNav={this.handleNav}\r\n            options={[\r\n              { name: 'movies', type: 'movie' },\r\n              { name: 'tv shows', type: 'tv' }\r\n            ]}\r\n          />\r\n        </div>\r\n\r\n        <div className='home__lists'>{this.renderLists()}</div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n  // movies state\r\n  currentMovies: state.movies.current,\r\n  popularMovies: state.movies.popular,\r\n  upcomingMovies: state.movies.upcoming,\r\n  topMovies: state.movies.top,\r\n\r\n  // shows state\r\n  currentShows: state.shows.current,\r\n  popularShows: state.shows.popular,\r\n  airingShows: state.shows.airingToday,\r\n  topShows: state.shows.top\r\n})\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  // movies actions\r\n  fetchCurrentMovies: () => dispatch(actions.getCurrentMovies()),\r\n  fetchPopularMovies: () => dispatch(actions.getPopularMovies()),\r\n  fetchUpcomingMovies: () => dispatch(actions.getUpcomingMovies()),\r\n  fetchTopMovies: () => dispatch(actions.getTopMovies()),\r\n\r\n  // TV shows actions\r\n  fetchCurrentShows: () => dispatch(actions.getCurrentShows()),\r\n  fetchPopularShows: () => dispatch(actions.getPopularShows()),\r\n  fetchAiringShows: () => dispatch(actions.getAiringTodayShows()),\r\n  fetchTopShows: () => dispatch(actions.getTopShows())\r\n})\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(Home)\r\n"],"sourceRoot":""}